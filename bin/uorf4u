import uorf4u

import traceback
import sys

try:
    parameters = uorf4u.manager.Parameters()
    parameters.load_config()
    parameters.parse_cmd_arguments()
    if "accession_number" in parameters.arguments.keys():
        refseq_protein = uorf4u.data_processing.RefSeqProtein(
            accession_number=parameters.arguments['accession_number'],
            parameters=parameters)
        homologous_list = refseq_protein.blastp_searching_for_homologous()
    if "homologous_list_file" in parameters.arguments.keys():
        try:
            with open(parameters.arguments["homologous_list_file"]) as hlf:
                homologous_list = hlf.read().split('\n')
        except:
            raise uorf4u.manager.Ant4suorfError(f"Unable to parse the file with a list of homologous. Please, "
                                                f"check your file: {parameters.arguments['homologous_list_file']}")

    if "homologous_list" in parameters.arguments.keys():
        homologous_list = parameters.arguments["homologous_list"]

    homologous = uorf4u.data_processing.Homologous(homologous_list, parameters)
    homologous.get_upstream_sequences()
    homologous.save_upstream_sequences()
    homologous.annotate_orfs()
    homologous.filter_orfs_by_sd_annotation()  # add an argument to control
    homologous.save_annotated_orfs()
    homologous.conserved_orf_searching()
    homologous.filter_out_similar_paths()
    homologous.run_msa()
    homologous.save_msa()
    homologous.save_results_summary_table()
    homologous.plot_logo_figs()
    homologous.plot_ggmsa_figs()


except Exception as e:
    if parameters.arguments['debug']:
        traceback.print_exc()
    else:
        for i in ((traceback.format_exc()).split('\n')):
            if 'uORF4uError:' in i:
                print(f"uORF4uError ðŸ’”: {i.split(':')[1]}", file=sys.stderr)
